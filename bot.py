import os
import shutil
import asyncio
import logging
import time
from dotenv import load_dotenv
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
from parse_module.main import main as parse_main

from aiogram.types import FSInputFile


async def main(BOT_TOKEN, NUMBER_OF_PARSING):
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    @dp.message(CommandStart())
    async def start(message: Message):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —è –≤–µ—Ä–Ω—É —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º –ø–æ–∑–∏—Ü–∏—è–º."
        )

    @dp.message(F.text)
    async def handle_query(message: types.Message):
        keyword = message.text.strip()
        chat_id = message.chat.id
        print("\nreceive message:", keyword)

        await message.answer(
            f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞: <b>{keyword}</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...\n",
            parse_mode="HTML",
        )
        # –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—à–ª–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        if os.path.exists(".data"):
            shutil.rmtree(".data")
        os.makedirs(".data", exist_ok=True)
        try:
            start = time.time()
            result = await parse_main(
                keyword=keyword, NUMBER_OF_PARSING=NUMBER_OF_PARSING
            )
            exec_time = time.time() - start
            print("parse_main exec_time parse_main = ", exec_time)

            reply = (
                f"\u2705 –¢–æ–ø-{NUMBER_OF_PARSING} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{keyword}</b>\n"
            )
            await message.answer(reply, parse_mode="HTML")
            reply = ""
            for nm_id, data in result.items():
                resp = f'<a href="{data["link"]}">{data["name"]}</a>'
                reply += (
                    f"\n{resp}\n"
                    f"{data['price']}‚ÇΩ (–°–ü–ü = 30%)\n"
                    f"{data['nmReviewRating']} ({data['nmFeedbacks']} –æ—Ç–∑—ã–≤–æ–≤) \n"
                    f"–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –æ—Ç–∑—ã–≤–æ–≤: {data['five_last_feedbacks_rating']} \n"
                    f"–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: {data['organic_position']}\n"
                    f"–ü—Ä–æ–º–æ –ø–æ–∑–∏—Ü–∏—è: {data['promo_position']}\n"
                    f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –ø–æ–∏—Å–∫–µ: {data['page']}\n"
                    f"–û—Å—Ç–∞—Ç–∫–∏: {data['remains']}\n"
                    f"C—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ(–Ω–∞ –ø–µ—Ä–≤–æ–µ): {data['link_to_photos'].split(';')[0]}\n"
                    f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:100]}...\n"
                    f"\n–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞ (–û—Ü–µ–Ω–∫–∞ {data['rate_of_last_feedback']}): {data['text_of_last_feedback'][:100]}...\n"
                )

                sent_message = await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=data["link_to_photos"].split(";")[0],
                    caption=reply,
                    parse_mode="HTML",
                )
                video = FSInputFile(f".data/video_{nm_id}.mp4")

                if data["link_to_video"] != "":
                    await message.answer_video(
                        video=video,
                        caption="–î–∞—Ä—é‚ù§Ô∏è",
                        reply_to_message_id=sent_message.message_id,
                    )
                reply = ""
            reply = f"\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {exec_time:.2f} —Å–µ–∫\n"

            await message.answer(reply, parse_mode="HTML")
            print(f"–≤—ã–¥–∞–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}, {keyword}\n")

        except Exception:
            await message.answer("\u274c –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    await dp.start_polling(bot)


if __name__ == "__main__":
    load_dotenv()
    BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
    NUMBER_OF_PARSING = int(os.getenv("NUMBER_OF_PARSING"))
    print("bot launched!")

    asyncio.run(main(BOT_TOKEN, NUMBER_OF_PARSING))
