import os
import asyncio
import logging
import time
from dotenv import load_dotenv
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.types import InputMediaPhoto,  FSInputFile
from aiogram.utils.chat_action import ChatActionSender
from parse_module import main as parse_main
from service.parse_photo_by_nm_id import parse_photos


async def send_photos(bot: Bot, chat_id: int, offset: int = 0, limit: int = 10):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –ø–∞–ø–∫–∏ images/
    :param offset: –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    :param limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª–µ–µ 10)
    """
    image_folder = "images"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    image_files = sorted([
        f for f in os.listdir(image_folder) 
        if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))
    ])[offset:offset+limit]

    if not image_files:
        await bot.send_message(chat_id, "üñº –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        return

    async with ChatActionSender.upload_photo(chat_id=chat_id, bot=bot):
        media_group = []
        
        for i, filename in enumerate(image_files):
            file_path = os.path.join(image_folder, filename)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            photo = FSInputFile(file_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            if i == 0:
                media_group.append(
                    InputMediaPhoto(
                        media=photo,
                        caption=f"üì∏ –§–æ—Ç–æ {offset+1}-{offset+len(image_files)} –∏–∑ {len(os.listdir(image_folder))}"
                    )
                )
            else:
                media_group.append(InputMediaPhoto(media=photo))

        try:
            await bot.send_media_group(chat_id=chat_id, media=media_group)
        except Exception as e:
            await bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}"
            )

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    @dp.message(CommandStart())
    async def start(message: Message):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —è –≤–µ—Ä–Ω—É —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º –ø–æ–∑–∏—Ü–∏—è–º."
        )

    @dp.message(F.text)
    async def handle_query(message: types.Message):
        query = message.text.strip()
        chat_id = message.chat.id
        print("receive message:", query)

        await message.answer(
            f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞: <b>{query}</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...\n",
            parse_mode="HTML",
        )

        try:
            start = time.time()
            result = await parse_main(query)
            exec_time = time.time() - start
            print("parse_main exec_time parse_main = ", exec_time)
        

            reply = "\u2705 –¢–æ–ø-20 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n"
            for nm_id, data in result.items():
                resp = f'<a href="{data["link"]}">{data["name"]}</a>'
                reply += (
                    f"\n{resp}\n"
                    f"{data['price']}‚ÇΩ (–°–ü–ü = 30%)\n"
                    f"{data['nmReviewRating']} ({data['nmFeedbacks']} –æ—Ç–∑—ã–≤–æ–≤) \n"
                    f"–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: {data['organic_position']}\n"
                    f"–ü—Ä–æ–º–æ –ø–æ–∑–∏—Ü–∏—è: {data['promo_position']}\n"
                    f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –ø–æ–∏—Å–∫–µ: {data['page']}\n"
                    f"–û—Å—Ç–∞—Ç–∫–∏: {data['remains']}\n"
                )
            reply += f"\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {exec_time:.2f} —Å–µ–∫\n"
            await message.answer(reply, parse_mode="HTML")
            await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            list_of_nm_id = [item for item in result]
            await parse_photos(list_of_nm_id)
            
            await send_photos(bot, chat_id,0,10)
            await send_photos(bot, chat_id,10,20)
        except Exception:
            await message.answer("\u274c –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    await dp.start_polling(bot)


if __name__ == "__main__":
    load_dotenv()
    BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
    asyncio.run(main())
